<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>GBLAP Chat</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    /* Sub Navigation (unchanged) */
    .sub-nav {
      background: #333;
      padding: 10px 0;
    }
    .sub-nav ul {
      list-style: none;
      display: flex;
      align-items: center;
      justify-content: space-around;
      margin: 0;
      padding: 0;
    }
    .sub-nav li {
      margin: 0 15px;
    }
    .sub-nav a {
      color: #fff;
      text-decoration: none;
      font-weight: bold;
      transition: color 0.3s ease;
    }
    .sub-nav a:hover {
      color: #ff0000;
    }

    /* Enhanced Chat Icon */
    .chat-trigger {
      position: fixed;
      bottom: 30px;
      right: 30px;
      z-index: 9999;
      transition: all 0.3s ease;
    }

    .chat-button {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      width: 80px;
      height: 80px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      box-shadow: 0 10px 25px rgba(118, 75, 162, 0.3);
      transition: all 0.3s ease;
      position: relative;
      border: none;
    }

    .chat-button:hover {
      transform: scale(1.1) rotate(10deg);
      box-shadow: 0 15px 30px rgba(118, 75, 162, 0.4);
    }

    .chat-button i {
      font-size: 28px;
      margin-bottom: 5px;
    }

    .chat-button::after {
      content: "Chat";
      position: absolute;
      bottom: -25px;
      left: 50%;
      transform: translateX(-50%);
      background: #fff;
      color: #764ba2;
      padding: 4px 12px;
      border-radius: 15px;
      font-size: 12px;
      font-weight: bold;
      box-shadow: 0 3px 10px rgba(0,0,0,0.1);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .chat-button:hover::after {
      opacity: 1;
    }

    /* Enhanced Chat Container */
    .chat-container {
      position: fixed;
      bottom: 120px;
      right: 30px;
      width: 400px;
      max-width: 90%;
      height: 70vh;
      background: white;
      border-radius: 20px;
      box-shadow: 0 15px 40px rgba(0,0,0,0.2);
      transform: translateY(20px);
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
      z-index: 9998;
    }

    .chat-container.active {
      transform: translateY(0);
      opacity: 1;
      visibility: visible;
    }

    .chat-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 20px;
      border-radius: 20px 20px 0 0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .chat-header h3 {
      margin: 0;
      font-size: 1.2em;
    }

    .close-btn {
      background: none;
      border: none;
      color: white;
      font-size: 1.5em;
      cursor: pointer;
      padding: 5px;
    }

    .chat-messages {
      flex: 1;
      padding: 20px;
      overflow-y: auto;
      background: #f9f9ff;
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .message {
      max-width: 80%;
      padding: 12px 18px;
      border-radius: 15px;
      animation: messageAppear 0.3s ease;
    }

    @keyframes messageAppear {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .user-message {
      background: #667eea;
      color: white;
      align-self: flex-end;
      border-radius: 15px 15px 0 15px;
    }

    .bot-message {
      background: white;
      color: #333;
      align-self: flex-start;
      box-shadow: 0 3px 10px rgba(0,0,0,0.05);
      border-radius: 15px 15px 15px 0;
    }

    .typing-indicator {
      display: none;
      padding: 15px 20px;
      background: white;
      box-shadow: 0 3px 10px rgba(0,0,0,0.05);
      border-radius: 15px;
      margin: 10px 0;
    }

    .typing-dots {
      display: flex;
      gap: 5px;
    }

    .typing-dots span {
      width: 8px;
      height: 8px;
      background: #ddd;
      border-radius: 50%;
      animation: typing 1.4s infinite;
    }

    @keyframes typing {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-5px); }
    }

    .chat-input {
      padding: 20px;
      background: white;
      border-top: 1px solid #eee;
      display: flex;
      gap: 10px;
    }

    .chat-input input {
      flex: 1;
      padding: 12px 18px;
      border: 1px solid #ddd;
      border-radius: 25px;
      outline: none;
      transition: all 0.3s ease;
    }

    .chat-input input:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .send-btn {
      background: #667eea;
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: 25px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .send-btn:hover {
      background: #764ba2;
      transform: translateY(-1px);
    }
  </style>
</head>
<body>
  <!-- Sub Navigation (unchanged) -->
  <nav class="sub-nav">
    <ul>
      <li><a href="/product-page">All</a></li>
      <li><a href="/product-page?category=laptop">Laptop</a></li>
      <li><a href="/product-page?category=keyboard">Keyboard</a></li>
      <li><a href="/product-page?category=screen">Screen</a></li>
      <li><a href="/product-page?category=mouse">Mouse</a></li>
      <li><a href="/product-page?category=headsphone">Headsphone</a></li>
    </ul>
  </nav>

  <!-- Chat Interface -->
  <div class="chat-trigger">
    <button class="chat-button" onclick="toggleChat()">
      <i class="fas fa-comment-dots"></i>
    </button>
  </div>

  <div class="chat-container">
    <div class="chat-header">
      <h3>GBLAP Assistant</h3>
      <button class="close-btn" onclick="toggleChat()">&times;</button>
    </div>
    <div class="chat-messages" id="chatMessages">
      <div class="typing-indicator" id="typingIndicator">
        <div class="typing-dots">
          <span style="animation-delay: 0s"></span>
          <span style="animation-delay: 0.2s"></span>
          <span style="animation-delay: 0.4s"></span>
        </div>
      </div>
    </div>
    <div class="chat-input">
      <input type="text" id="userInput" placeholder="Type your message...">
      <button class="send-btn" id="sendBtn">Send</button>
    </div>
  </div>

  <script>
    let chatOpen = false;
    const chatContainer = document.querySelector('.chat-container');
    const chatMessages = document.getElementById('chatMessages');
    const userInput = document.getElementById('userInput');
    const sendBtn = document.getElementById('sendBtn');
    const typingIndicator = document.getElementById('typingIndicator');

    function toggleChat() {
      chatOpen = !chatOpen;
      chatContainer.classList.toggle('active', chatOpen);
    }

    async function sendMessage() {
      const message = userInput.value.trim();
      if (!message) return;

      // Add user message
      addMessage(message, 'user');
      userInput.value = '';
      let userMessage = message;
      // Show typing indicator
      showTyping(true);

      // Call API
      try {
        const response = await fetch('/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ userMessage })
        });
        
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        let data = await response.json();
        console.log("This is the data: ", data.botReply);

        addMessage(data.botReply, 'bot');
      } catch (error) {
        addMessage("Sorry, I'm having trouble connecting. Please try again later.", 'bot');
      } finally {
        showTyping(false);
      }
    }

    function addMessage(text, sender) {
      const messageDiv = document.createElement('div');
      messageDiv.classList.add('message', `${sender}-message`);
      messageDiv.textContent = text;
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function showTyping(show) {
      typingIndicator.style.display = show ? 'block' : 'none';
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Event Listeners
    sendBtn.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', (e) => e.key === 'Enter' && sendMessage());
    document.addEventListener('click', (e) => {
      if (!chatContainer.contains(e.target) && !document.querySelector('.chat-button').contains(e.target)) {
        chatOpen = false;
        chatContainer.classList.remove('active');
      }
    });
  </script>
</body>
</html>